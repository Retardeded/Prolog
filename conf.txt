begin;

CREATE SCHEMA confa;

CREATE TABLE confa.clients (
 clientid INTEGER PRIMARY KEY,
 name VARCHAR(80),
 country VARCHAR(40),
 city VARCHAR(40),
 address VARCHAR(80),
 postalcode VARCHAR(6),
 phone VARCHAR(15),
 isuniversity BOOLEAN
);
CREATE TABLE confa.conferences (
 conferenceid INTEGER PRIMARY KEY,
 name VARCHAR(200),
 acronym VARCHAR(10),
 country VARCHAR(40),
 city VARCHAR(40),
 venue VARCHAR(80),
 startdate DATE,
 enddate DATE
);
CREATE TABLE confa.participants (
 participantid INTEGER PRIMARY KEY,
 firstname VARCHAR(40),
 lastname VARCHAR(40),
 idcardnumber VARCHAR(15),
 isstudent BOOLEAN,
 phone VARCHAR(15),
 email VARCHAR(40)
);
CREATE TABLE confa.reservations (
 reservationid INTEGER PRIMARY KEY,
 conferenceid INTEGER REFERENCES confa.conferences (conferenceid),
 participantid INTEGER REFERENCES confa.participants (participantid),
 clientid INTEGER,
 arrivaldate DATE,
 departuredate DATE,
 ispaid BOOLEAN,
 iscancelled BOOLEAN
);
CREATE TABLE confa.conferencedays (
 conferencedayid INTEGER PRIMARY KEY,
 conferenceid INTEGER REFERENCES confa.conferences (conferenceid),
 description VARCHAR(300),
 eventdate DATE,
 starttime TIME,
 endtime TIME,
 price NUMERIC(6,2),
 studentdiscount NUMERIC(5,2),
 maxparticipantsnumber INTEGER
);
CREATE TABLE confa.dayreservations (
 reservationid INTEGER REFERENCES confa.reservations (reservationid),
 conferencedayid INTEGER REFERENCES confa.conferencedays (conferencedayid),
 participantid INTEGER REFERENCES confa.participants (participantid),
 specialdiscount NUMERIC(5,2),
 iscancelled BOOLEAN,
 PRIMARY KEY (reservationid, conferencedayid, participantid)
);
CREATE TABLE confa.conferenceevents (
 conferenceeventid INTEGER PRIMARY KEY,
 conferenceid INTEGER REFERENCES confa.conferences (conferenceid),
 description VARCHAR(300),
 eventdate DATE,
 starttime TIME,
 endtime TIME,
 price NUMERIC(6,2),
 studentdiscount NUMERIC(5,2),
 maxparticipantsnumber INTEGER
);
CREATE TABLE confa.eventsreservations (
 reservationid INTEGER REFERENCES confa.reservations (reservationid),
 conferenceeventid INTEGER REFERENCES confa.conferenceevents (conferenceeventid),
 participantid INTEGER REFERENCES confa.participants (participantid),
 specialdiscount NUMERIC(5,2),
 iscancelled BOOLEAN,
 PRIMARY KEY (reservationid, conferenceeventid, participantid)
);

commit;


copy clients (clientid, name, country, city, address, postalcode, phone, isuniversity) from stdin with
(NULL '', delimiter '|');
1|AGH w Krakowie|Polska|Kraków|AG 30|30-059|0700444000|TRUE
2|UJ w Krakowie|Polska|Wieliczka|UJ 50|00-999|0700444000|FALSE
\.
copy conferences (conferenceid, name, acronym, country, city, venue, startdate, enddate) from stdin
with (NULL '', delimiter '|');
1|Konferencja 1|K1|Polska|Kraków|ICE Kraków|2019-01-01|2019-01-03
2|Konferencja 2|K2|Polska|Warszawa|ICE Warszawa|2019-02-01|2019-02-03
3|Konferencja 3|K3|Polska|Wrocław|ICE Wrocław|2019-03-01|2019-03-03
4|Konferencja 4|K4|Polska|Rzeszów|ICE Rzeszów|2019-04-01|2019-04-03
\.
copy participants (participantid, firstname, lastname, idcardnumber, isstudent, phone, email) from
stdin with (NULL '', delimiter '|');
1|Ala|Kowalska|456789|TRUE|0700444000|ala@kowalska.pl
2|Dominika|Kowalska|426789|FALSE|0700444000|dominika@kowalska.pl
3|Małgorzata|Kowalska|416789|TRUE|0700444000|malgorzata@kowalska.pl
\.
copy reservations (reservationid, conferenceid, participantid, clientid, arrivaldate, departuredate,
ispaid, iscancelled) from stdin with (NULL '', delimiter '|');
1|1|1|1|2019-01-01|2019-01-04|TRUE|FALSE
2|2|1|1|2019-02-01|2019-02-04|TRUE|FALSE
3|3|2|2|2019-03-01|2019-03-04|TRUE|FALSE
4|4|3|2|2019-04-01|2019-04-04|TRUE|FALSE
\.
copy conferencedays (conferencedayid, conferenceid, description, eventdate, starttime, endtime,
price, studentdiscount, maxparticipantsnumber) from stdin with (NULL '', delimiter '|');
1|1|Opis konferencji 1|2019-01-01|08:00|17:00|300.00|50.00|50
2|1|Opis konferencji 1|2019-01-02|08:00|17:00|300.00|50.00|60
3|1|Opis konferencji 1|2019-01-03|08:00|17:00|300.00|50.00|50
4|2|Opis konferencji 2|2019-02-01|08:00|17:00|400.00|50.00|50
5|2|Opis konferencji 2|2019-02-02|08:00|17:00|500.00|50.00|80
6|2|Opis konferencji 2|2019-02-03|08:00|17:00|700.00|50.00|50
7|3|Opis konferencji 3|2019-03-01|08:00|17:00|150.00|50.00|10
8|3|Opis konferencji 3|2019-03-02|08:00|17:00|780.00|50.00|50
9|3|Opis konferencji 3|2019-03-03|08:00|17:00|870.00|50.00|30
10|4|Opis konferencji 4|2019-04-01|08:00|17:00|900.00|50.00|50
11|4|Opis konferencji 4|2019-04-02|08:00|17:00|400.00|50.00|30
12|4|Opis konferencji 4|2019-04-03|08:00|17:00|200.00|50.00|50
\.
copy dayreservations (reservationid, conferencedayid, participantid, specialdiscount, iscancelled)
from stdin with (NULL '', delimiter '|');
1|1|1|0.13|FALSE
2|2|2|0.15|FALSE
3|3|3|0.17|FALSE
4|4|1|0.18|FALSE
2|4|2|0.07|FALSE
\.
copy conferenceevents (conferenceeventid, conferenceid, description, eventdate, starttime, endtime,
price, studentdiscount, maxparticipantsnumber) from stdin with (NULL '', delimiter '|');
1|1|Wyjście do kina|2019-01-01|12:00|14:00|77.00|0.20|20
2|2|Wyjście do ZOO|2019-02-01|12:00|14:00|75.00|0.20|60
3|3|Wyjście do parku|2019-03-01|12:00|14:00|79.00|0.20|11
4|4|Wyjście do muzeum|2019-04-01|12:00|14:00|78.00|0.20|11
5|4|Wyjście do gabinetu profesora|2019-04-03|12:00|14:00|10.00|0.20|10
\.
copy eventsreservations (reservationid, conferenceeventid, participantid, specialdiscount,
iscancelled) from stdin with (NULL '', delimiter '|');
1|1|1|0.00|FALSE
2|2|1|0.01|FALSE
3|2|2|0.10|FALSE
4|3|3|0.11|FALSE
2|4|3|0.07|FALSE
\.
commit;




WITH

days AS (
    SELECT
        dr.reservationID,
        SUM(cd.price * (1 - dr.specialdiscount - cd.studentdiscount)) as price
    FROM
        Reservations r1
        INNER JOIN dayreservations dr ON r1.reservationid = dr.reservationid
        INNER JOIN conferencedays cd ON dr.conferencedayid = cd.conferencedayid
    WHERE
        cd.conferenceid = 1
        AND r1.iscancelled = false
    GROUP BY dr.reservationid
),

events AS (
    SELECT
        er.reservationid,
        SUM(ce.price * (1 - er.specialdiscount - ce.studentdiscount)) as price
    FROM
        reservations r2
        INNER JOIN eventsreservations er ON r2.reservationID = er.reservationID
        INNER JOIN conferenceevents ce ON er.conferenceeventID = ce.conferenceeventID
    WHERE
        ce.conferenceid = 1
        AND r2.isCancelled = false
    GROUP BY er.reservationid
)

SELECT AVG(days.price + COALESCE(events.price, 0)) as sredni_koszt FROM days LEFT JOIN events ON days.reservationid = events.reservationid

with days as(
select dr.reservationID,cd.conferenceID,
sum(cd.price*(1-cd.studentDiscount-dr.specialDiscount)) as days_price
from dayreservations as dr JOIN conferenceDays cd using(conferenceDayID)
where cd.conferenceID = 1 and dr.iscancelled = false group by
dr.reservationID,cd.conferenceID),
events as(
select er.reservationID,ce.conferenceID,
sum(ce.price*(1-ce.studentDiscount-er.specialDiscount)) as ev_price from
eventsreservations as er JOIN conferenceevents ce using(conferenceeventID)
where ce.conferenceID = 1 and er.iscancelled = false group by
er.reservationID,ce.conferenceID)
SELECT avg(d.days_price+COALESCE(e.ev_price,0.00)) as cena FROM days d
left JOIN events e USING(reservationID);


create or replace function onupdate()
 returns trigger as
 $$
 declare
day_id INTEGER;
 begin
 select * from DayReservations where ReservationID = NEW.ReservationID;
 if not found then
select conferenceDayID into day_id from DayReservations
WHERE conferenceID in (select conferenceID from conferenceevents where conferenceeventID =
new.conferenceeventID));
 insert into DaysReservations
values(EventDay.reservationID,day_id,new.participantID, new.specialDiscount,
new.iscancelled)
 end if;
 return NEW;
 end;
 $$
 language 'plpgsql';
create trigger nowy after insert on EventsReservation for each row execute procedure
onupdate();



Podaj instrukcję wyświetlającą identyfikator dodatkowego wydarzenia, identyfikator konferencji
której dotyczy oraz jego datę, który ma największą ilość rezerwacji.

with tmp as(
SELECT conferenceEventId, count(conferenceEventId) AS ilosc
FROM EventsReservations GROUP BY conferenceEventID
)
SELECT tmp.ilosc, ce.conferenceEventID, ce.conferenceID, ce.eventDate
FROM tmp
NATURAL JOIN conferenceEvents ce group by tmp.ilosc,ce.conferenceEventID
HAVING tmp.ilosc = (select max(tmp.ilosc) from tmp) ;

with tmp as (
SELECT conferenceEventId, COUNT(conferenceEventId) AS ilosc 
FROM eventsReservations GROUP BY conferenceEventId
)
SELECT tmp.ilosc, ce.conferenceEventID, ce.conferenceID, ce.eventDate
FROM tmp INNER JOIN conferenceEvents ce ON ce.conferenceeventid = tmp.conferenceeventid
GROUP BY ce.conferenceeventid, tmp.ilosc
HAVING tmp.ilosc = (SELECT MAX(tmp.ilosc) from tmp);


SELECT c.conferenceeventid,c.conferenceid,c.eventdate,COUNT(*) FROM eventsreservations r
	INNER JOIN conferenceevents c ON r.conferenceeventid=c.conferenceeventid 
		GROUP BY c.conferenceeventid
		ORDER BY COUNT(*) DESC LIMIT 1;


podaj instrukcje ustawiajace atrybut endTime dla trzeciego (numer porzadkowy) dnia
konferencji o nazwie 'Konferencja 1' na 19:00 (zalozmy ze bylo 18:00)

UPDATE conferenceDays SET endTime = '19:00' WHERE conferencedayid = 3 AND conferenceid IN 
(SELECT conferenceid FROM conference WHERE name = 'Konferencja 1')

UPDATE conferencedays set endtime = '19:00' WHERE conferencedayid = 3 AND conferenceid
IN(SELECT conferenceid FROM conferences WHERE name = 'Konferencja 1');


Napisz wyzwalacz, który w trakcie dokonywania rezerwacji na dzien konferencji będzie
sprawdzał, czy jest jeszcze wolne miejsce (czy suma dokonanych juz rezerwacji jest mniejsza
od maxParticipantsNumber).

CREATE OR REPLACE FUNCTION czy_jest_miejsce()
RETURNS TRIGGER AS
$$
DECLARE maxP integer;
DECLARE ilosc integer;
BEGIN
maxP := 0;
Ilosc := 0;
SELECT maxParticipantsNumber into maxP
FROM conferenceDays WHERE conferenceDayID = new.ConferenceDayId;
SELECT count(reservationid) into ilosc FROM DayReservations
WHERE conferenceDayID = new.conferenceDayId;
IF ilosc < maxP then
RETURN new;
Else
RETURN null;
END IF;
END;
$$ LANGUAGE PLpgSQL;
CREATE TRIGGER sprawdz_miejsce
BEFORE INSERT ON DayReservations
for each row
EXECUTE PROCEDURE czy_jest_miejsce();


SELECT conferenceID, name FROM Conferences WHERE conferenceID IN(SELECT conferenceID
FROM ConferenceEvents WHERE description ~* ' [a-z]{4}$');


Wyświetl identyfikator rezerwacji, identyfikator uczestnika i identyfikator klienta dla tych, którym
rezerwację opłacił ktoś inny.


WITH tmp AS( SELECT r.reservationid,r.participantid,r.clientid,c.name, p.firstName,
p.lastName from Clients c
JOIN Reservations r ON r.clientid = c.clientid
JOIN Participants p ON p.participantid = r.participantid )
SELECT reservationid,participantid,clientid,name,firstName,lastName from tmp
WHERE name NOT IN (SELECT firstName || ' ' || lastName AS name FROM participants WHERE
participantid=tmp.participantid);

przyklad 6

Wyświetl wszystkie rezerwacje, które są zamówione na całe konferencje (arrivalDate i
departureDate są takie same jak startDate i endDate w Conferences)

SELECT r.reservationID, r.arrivalDate, r.departureDate, c.startDate,c.endDate FROM
reservations r NATURAL JOIN conferences c WHERE r.arrivalDate = c.startDate and
r.departureDate = c.endDate;


przyklad 8
Wyzwalacz, który sprawdza czy przy rezerwowaniu danego dnia konferencji dzien miesci się w
przedziale dnia przyjazdu i odjazdu uczestnika

CREATE OR REPLACE FUNCTION czy_sensowna_rezerwacja()
RETURNS TRIGGER AS
$$
DECLARE dayDate date;
DECLARE arrival date;
DECLARE departure date;

BEGIN

SELECT eventDate into dayDate
FROM ConferenceDays WHERE conferenceDayID = new.ConferenceDayId;

SELECT arrivalDate,departureDate into arrival,departure
FROM Reservations WHERE reservationID = new.reservationID;

IF (dayDate, dayDate) OVERLAPS (arrival, departure) THEN
RETURN new;
Else
RETURN null;
END IF;
END;
$$ LANGUAGE PLpgSQL;

CREATE TRIGGER sensowna_rezerwacja
BEFORE INSERT ON DayReservations
for each row
EXECUTE PROCEDURE czy_sensowna_rezerwacja();

Wyświetl dane dotyczące wydarzenia dodatkowego, gdzie zarezerwowane są wszystkie
dostępne miejsca.

with tmp as(
SELECT conferenceEventId, count(*) AS ilosc
FROM EventsReservations GROUP BY conferenceEventID
)
SELECT tmp.ilosc, ce.conferenceEventID, ce.conferenceID, ce.eventDate
FROM tmp
NATURAL JOIN conferenceEvents ce where tmp.ilosc = maxParticipantsNumber;

Funkcja zwracająca id konferencji, opis wydarzenia i cenę dodatkowego eventu, który jest
najdroższy dla danej konferencji 
(jeśli jest kilka z tą samą najwyższą ceną, wyświetli wszystkie)

CREATE OR REPLACE FUNCTION najdrozsze(in arg1 INTEGER)
RETURNS TABLE(
ID_KONFERENCJI INTEGER,
OPIS VARCHAR(300),
CENA NUMERIC(6,2)
)
AS $$
DECLARE max_price NUMERIC(6,2);
BEGIN
SELECT max(price) INTO max_price
FROM conferenceevents
WHERE conferenceid = arg1;
return query
select conferenceID, description, price from
conferenceevents where price=max_price and
conferenceID = arg1;
END;
$$ LANGUAGE PLpgSQL;

Instrukcja wyświetlająca średnią ilość uczestników konferencji na jeden dzień (wśród
wszystkich)

With tmp as(
Select conferenceDayID, count(participantID) as ilosc from dayReservations group by
conferenceDayID)
Select avg(ilosc) from tmp;


Podaj dane uczestnika (participantID, firstName, lastName) i ilość dni na, na które ma
wykupioną rezerwację (czyli isPaid TRUE), którego rezerwacja jest najdłuższa(zarezerwował
największą ilość dni). Jeśli takich uczestników jest więcej niż jeden, wyświetl wszystkich.


With tmp as(
Select d.participantID, count(participantid) as ilosc from DayReservations d 
WHERE reservationId IN (SELECT reservationID FROM reservations WHERE ispaid = 'TRUE') 
group by
d.participantId)
Select p.participantID, p.firstName, p.lastName, tmp.ilosc
FROM tmp
NATURAL JOIN participants p group by tmp.ilosc, p.participantId
Having tmp.ilosc = (select max(tmp.ilosc) from tmp);



Wyświetl clientID, name oraz isUniversity wszystkich uniwersytetów oraz ilość
studentów(isStudent = TRUE), jakie wysłała (opłaciła) na poszczególne konferencje (wyświetl
też id konferencji)

With tmp as(
select clientID, count(participantID) as ilosc_uczestnikow from reservations where
clientID in (select clientID from clients where isUniversity is true) and clientId in 
(select clientId from participants where isstudent = 'TRUE')
group by clientID
)select clientID, name, isUniversity, ilosc_uczestnikow from clients natural join tmp;





{A,C} -> B, D -> C {A,D} -> C, E -> D, E -> C, A-> C,
{A,E} -> B, C -> B

A+ = {A,B,C}
B+ = {B}
C+ = {C,B}
D+ = {D,C,B}
E+ = {E,D,C,B}
{A,E}+ = {A,E,B,D,C} = H

{A,B,C} {C,D,E}

f1{A,B,C} = A -> C, C -> B
f2{C,D,E} = D -> C, E -> D


{A,C} -> B, D -> C {A,D} -> C, E -> D, E -> C, A-> C,
{A,E} -> B, C -> B

KLUCZ - {A,E}+ = {A,E,B,D,C} = H



with tmp AS (SELECT conferenceEventId, count(conferenceEventId) as ilosc FROM
eventReservations GROUP BY conferenceEventId
)
SELECT tmp.ilosc, conferenceEventId, conferenceId FROM tmp
INNER JOIN conferenceEvents c on c.conferenceEventId = tmp.conferenceEventId
GROUP BY tmp.ilosc, c.conferenceEventId
HAVING tmp.ilosc = (select max(tmp.ilosc) from tmp); 

UPDATE conferenceDays SET endTime = '19:00' WHERE conferenceDayId = 3  AND
conferenceId IN 
(SELECT conferenceId FROM conferences WHERE name = 'Konferencja 1')


CREATE OR REPLACE FUNCTION czy_jest_miejsce()
RETURNS TRIGGER AS
$$

DECLARE maxP
DECLARE howMany

BEGIN

SELECT count(reservationId) FROM DaysReservations
WHERE = conferenceDayId = new.conferenceDayId

SELECT maxParicipantsNumber INTO maxP FROM ConferenceDays
WHERE ConferenceDayId = New.conferenceDayId

if maxP > howMany then
	return new
else 
	return null
endif

END
$$ LANGUAGE PLphSQL

CREATE TRIGGER jest_miejsce
BEFORE INSERT ON dayReserations
for each row
EXECUTE PROCEDURE czy_jest_miejsce();


SELECT e.conferenceEventId, e.conferenceId, e.eventDate FROM conferenceEvents e 
WHERE maxParticipantsNumber = 
(SELECT COUNT(reservationId) FROM EventsReservations r 
WHERE e.conferenceEventiD = r.conferenceEventiD);

with tmp as(
SELECT conferenceEventId, count(reservationID) AS ilosc
FROM EventsReservations GROUP BY conferenceEventID
)
SELECT tmp.ilosc, ce.conferenceEventID, ce.conferenceID, ce.eventDate
FROM tmp
NATURAL JOIN conferenceEvents ce where tmp.ilosc = maxParticipantsNumber ;

with p1 as (
select conferenceID, acronym, name, count(*) as noOfDays
from Conferences natural join ConferenceDays
where startDate between '2020-07-01' and '2002-07-31'
or endDate between '202-07-01' and '202-07-31'
group by conferenceID, acronym, name
having count(*) >= 4
),
p2 as (
select conferenceID, count(*) as noOfEvents
from Conferences natural join ConferenceEvents
where startDate between '2020-07-01' and '2020-07-31'
or endDate between '2020-07-01' and '2020-07-31'
group by conferenceID
)
select acronym, name, noOfDays, noOfEvents
from pl left join p2
where noOfEvents = (select max(noOfEvents) from p2);

create trigger 


Podaj ciag instrukcji, które: (1) dodaja w systemie uzytkowników ˙ adam, ewa i karol; (2) tworza grupe uzytkowników ˙
dzial_pomiarow; (3) dodaja trzech wymienionych pracowników do tej grupy; (4) odbieraja wszelkie prawa do tabel pomiary i ostrzezenia
wszystkim zarejestrowanym uzytkownikom; (5) przyznaja prawa przegladania, modyfikacji, dodawania rekordów i usuwania rekordów ˙
dla wymienionych tabel grupie dzial_pomiarow

create role adam login;
create role ewa login;
create role karol login;
create role dzial_pomiarow;
grant dzial_pomiarow to adam, ewa, karol;
revoke all privileges on pomiary, ostrzezenia from public;
grant select, update, insert, delete on pomiary, ostrzezenia to dzial_pomiarow;

Podaj ciąg instrukcji, które (1) dodają w systemie użytkowników ewa, adam,
anna; (2)tworzą grupę użytkowników dzial_zamowień; (3) dodają trzech
wymienionych pracowników do tej grupy; (4) odbierają wszelkie prawa do tabel
zamowione_meble, zamowione_paczki i zamowienia wszystkim
zarejestrowanym użytkownikom;(5) przyznają prawa przeglądania, modyfikacji,
dodawania rekordów i usuwania rekordów dla wymienionych tabel grupie
dzial_zamowień.

create role ewa login;
create role adam login;
create role anna login;
create role dzial_zamowien;
grant dzial_zamowien to ewa,adam,anna;
revoke all privileges on zamowione_meble, zamowione_paczki, zamowienia from adam;
revoke all privileges on zamowione_meble, zamowione_paczki, zamowienia from ewa;
revoke all privileges on zamowione_meble, zamowione_paczki, zamowienia from, anna;
grant select, insert, delete on zamowione_meble, zamowione_paczki, zamowienia to
dzial_zamowien;


 Podaj instrukcje: (1) tworz±c± u¿ytkownika karol, (2) dodaj±c± u¿ytkownika karol do grupy
magazynierzy, (3) dodaj±c± u¿ytkownikowi karol prawa do wstawiania i aktualizacji rekordów w
tabeli zamowione_paczki, (4) dodaj±c± grupie magazynierzy prawo przegl±dania rekordów w
tabeli paczki.

create role karol;
grant magazynierzy to karol;
grant insert, update on zamowione_paczki to karol;
grant select on paczki to magazynierzy;

Podaj instrukcje: (1) usuwaj±c± u¿ytkownika {karol} z grupy {magazynierzy}, (2) odbieraj±c±
u¿ytkownikowi {karol} wszystkie uprawnienia do tabeli {elementy}, (3) usuwaj±c± (ca³kowicie)
u¿ytkownika {karol}, (4) usuwaj±c± wszystkim u¿ytkownikom prawo przegl±dania tabeli {meble}.

revoke magazynierzy from karol;
revoke all privileges on elementy from karol;
drop role karol;
revole select on meble from public;