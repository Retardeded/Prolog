peano_number(zero, 0).
peano_number(s(X), Y) :- 
    peano_number(X, Number),
    Y is 1 + Number.

peano_add(zero, X, X).
peano_add(X, zero, X).
peano_add(s(X),s(Y),s(s(R))) :-
    peano_add(X,Y,R).

peano_add(X, zero, X).
peano_add(X, s(Y), s(Z)) :- peano_add(X, Y, Z).

peano_times(X, zero, zero).
peano_times(zero, X, zero).
peano_times(X,s(Y), Result) :-
	peano_times(X,Y,R),
    peano_add(X,R,Result).

process_command(list) :-
	writeln('Znajomi:'),
  foreach(
		jest_znajomym(Imie), 
	  (format('- ~w', [Imie]), nl)
	).

% sprawdza czy daty na siebie nachodza
date_overlaps(A-B, C-D) :- A < D, B > C.

% oblicza wiek autora (narodziny-smierc)
wiek(A-B, Wiek) :- Wiek is B - A.

% sprawdza który autor żył dłużej
max(A1-W1, _-W2, A1-W1) :- W1 >= W2.
max(_-W1, A2-W2, A2-W2) :- W2 > W1.


setof(Imie, (A, B, C, D)^ksiazka(A, B, autor(Imie, C), D), Autorzy).

findall(Tytul, (ksiazka(_, Tytul, autor(_, _-Smierc), wydanie(_, Wydana)), Wydana > Smierc), Tytuly).

findall(Autor-Ksiazki, bagof(Tytul, (A, B, C, D)^(ksiazka(A, Tytul, autor(Autor, C), D)), Ksiazki), Lista).

setof(Autor1-Autor2, (A, B, C, D, E, F, G, H, I, J)^(ksiazka(A, B, autor(Autor1, C-D), E), ksiazka(F, G, autor(Autor2, H-I), J), Autor1 \= Autor2, date_overlaps(C-D, H-I), C=<H), Lista).

findall(Autor-Wiek, (ksiazka(_, _, autor(Autor, Zycie), _), wiek(Zycie, Wiek)), Lista), foldl(max, Lista, none-0, Wynik). 
% długość listy
list_number([],0).
list_number([_|T], Y) :-
list_number(T, Z),
Y is Z + 1.

list_add([], L, L). 
list_add([H|T], L2, [H|TL]) :- list_add(T, L2, TL). 

one(_,1).
add(A,B,C) :- C is A+B.

list_number_mfr(L, Length) :-
maplist(one, L, L2),
foldl(add, L2, 0, Length).

connect(H, L, [H|L]).

list_add_mfr(L1, L2, L3) :-
foldl(connect, L1, [], RL1),
foldl(connect, RL1, L2, L3).

usun(_, [], []).
usun(Term, [Term|Tail], Tail).
usun(Term, [Head|Tail], [Head|Result]) :-
  Term \= Head,
  usun(Term, Tail, Result).

usun_wszystkie(_, [], []).

usun_wszystkie(Term, [Term|Tail], Result) :-
    usun_wszystkie(Term, Tail, Result).

usun_wszystkie(Term, [Head|Tail], [Head|Result]) :-
    Term \= Head,
    usun_wszystkie(Term, Tail, Result).

dodaj(Element, Lista, [Element|Lista]).

dodaj(Term, [Head|Tail],[Head|New_Tail]):-
    dodaj(Term,Tail,New_Tail).

palindrom(L):- reverse(L, L).
 
podlista([],[]).
podlista([H|T],[H|Result]):-
    podlista(T,Result).
podlista([_|T],Result):-
    podlista(T,Result).
odetnij_z_lewej(0, Lista, Lista).

odetnij_z_lewej(Term, [_|T], Result) :-
    Term1 is Term - 1,
    odetnij_z_lewej(Term1, T, Result).

odetnij_z_prawej(0, Lista, Lista).
odetnij_z_prawej(Term, Lista, Result) :-
    Term1 is Term - 1,
    append(MniejszaLista,[_], Lista),
    odetnij_z_prawej(Term1,MniejszaLista,Result).

odetnij_z_prawej(A,B,C) :-
    length(D,A),
    append(C,D,B).

zawiera(L,S):-
    append([_,S,_],L).

usun(X,[X|Reszta],Reszta).
usun(X,[Y|Ogon],[Y|Reszta]) :-
	usun(X,Ogon,Reszta).

permutacja([],[]).
permutacja(L,[X|P]) :-
	usun(X,L,L1),
	permutacja(L1,P).

podziel([X], [X], []).
podziel([X,Y], [X], [Y]).
podziel([X,Y|A], [X|B], [Y|C]) :- podziel(A, B, C).
