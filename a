findall(Imie, (jest_krewnym(_,Imie)), Znajomi), sort(Znajomi, CzysciZnajomi).

findall(K1-K2, jest_krewnym(K1,K2), Znajomi), sort(Znajomi, CzysciZnajomi).

jest_krewnym_list(X,Y) :-
    jest_krewnym2(X,Y,L).

jest_krewnym2(X,Y,L) :- 
	jest_przodkiem(Z,X),
    jest_przodkiem(Z,Y),
    X \= Y,
    \+member((X,Y), L).
	L = [(X,Y)|L].

findall(X, ksiazka(_,_, autor(X,Y), wydanie(A,B)), Autorzy), sort(Autorzy, Unique).
findall(X, (ksiazka(_,_, autor(C,_-Sm), wydanie(X,A)),A > Sm), Ksiazki).
findall(Autor-Ksiazki, bagof(Tytul, (A, B, C)^(ksiazka(A, Tytul, autor(Autor, B), C)), Ksiazki), Lista).
setof(Autor1-Autor2, (A, B, C, D, E, F, G, H, I, J)^(ksiazka(A, B, autor(Autor1, C-D), E), ksiazka(F, G, autor(Autor2, H-I), J), Autor1 \= Autor2, date_overlaps(C-D, H-I), C=<H), Lista).
findall(Autor-Wiek, (ksiazka(_, _, autor(Autor, Zycie), _), wiek(Zycie, Wiek)), Lista),
foldl(max, Lista, none-0, Wynik).
% sprawdza czy daty na siebie nachodza
date_overlaps(A-B, C-D) :- A < D, B > C.

% oblicza wiek autora (narodziny-smierc)
wiek(A-B, Wiek) :- Wiek is B - A.

% sprawdza który autor żył dłużej
max(A1-W1, -W2, A1-W1) :- W1 >= W2.
max(-W1, A2-W2, A2-W2) :- W2 > W1.


fail. -> false.


% 1. w pustej liście nia ma co filtrować
usuń(_, [], []).
% 2. element spełnia warunek, przekładamy go
usuń(X, [H|T1], [H|T2]) :-
    X \= H,
    usuń(X,T1,T2).
% 3. element nie spełnia warunku, ignorujemy go
usuń(X,[X|T], T).



% 1. w pustej liście nia ma co filtrować
usuń_wszystkie(X,[], []).
% 2. element spełnia warunek, przekładamy go
usuń_wszystkie(X,[H|T1], [H|T2]) :-
    satisfies_condition(X,H),
    usuń_wszystkie(X,T1,T2).
% 3. element nie spełnia warunku, ignorujemy go
usuń_wszystkie(X,[H|T1], T2) :-
    \+ satisfies_condition(X,H),
    usuń_wszystkie(X,T1,T2).

% Element spełnia warunek, jeśli jest 
% zmienną bez przypisanej wartości
% var/1 to wbudowany predykat
satisfies_condition(X,H) :- X \= H.


% 1. w pustej liście nia ma co filtrować
% 2. element spełnia warunek, przekładamy go
dodaj(X, [H|T1], [H|T2]) :-
    dodaj(X,T1,T2).
% 3. element nie spełnia warunku, ignorujemy go
dodaj(X,T,[X|T]).


odwróć([], Acc, Acc).
% Każdy element dodawany jest na początek akumulatora
% w kolejności od lewej do prawej.
% W efekcie ostatni element wyląduje na początku akumulatora
odwróć([H|T], Acc, Result) :-
    NewAcc = [H|Acc],
    odwróć(T, NewAcc, Result).
odwróć(List, Result) :-
    odwróć(List, [], Result).

palindrom(L):-
    odwróć(L,X),
	X = L.
	
	
	
	
	% 1. w pustej liście nia ma co filtrować
podlista([], []).
% 2. element spełnia warunek, przekładamy go
podlista([H|T1], [H|T2]) :-
    podlista(T1,T2).
% 3. element nie spełnia warunku, ignorujemy go
podlista([_|T1], T2) :-
    podlista(T1,T2).

% Element spełnia warunek, jeśli jest 
% zmienną bez przypisanej wartości
% var/1 to wbudowany predykat.
